import { GoogleGenerativeAI } from '@google/generative-ai';
import {
  doc,
  deleteDoc,
  collection,
  query,
  where,
  getDocs,
  orderBy,
  addDoc,
  updateDoc,
  serverTimestamp,
} from 'firebase/firestore';
import { db } from './firebase';

const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-lite' });

export const ChatService = {
  async getBotResponse(messagesArr) {
    try {
      const systemPrompt = `–¢–∏ ‚Äî Aurora, —Å—É—á–∞—Å–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. 

–Ü–ù–°–¢–†–£–ö–¶–Ü–á:
1. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Markdown –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è:
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: ## –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–ª—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–æ–∑–¥—ñ–ª—ñ–≤)
   - –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏: ### –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–ª—è –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤)
   - –°–ø–∏—Å–∫–∏: - –ø—É–Ω–∫—Ç (–¥–ª—è –º–∞—Ä–∫–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤)
   - –ù—É–º–µ—Ä–æ–≤–∞–Ω—ñ —Å–ø–∏—Å–∫–∏: 1. –ø—É–Ω–∫—Ç (–¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π)
   - –ñ–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç: **–≤–∞–∂–ª–∏–≤–∏–π —Ç–µ–∫—Å—Ç**
   - –ö—É—Ä—Å–∏–≤: *–ø–æ—è—Å–Ω–µ–Ω–Ω—è*
   - –ö–æ–¥: \`—Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥—É\` (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤)
   - –ö–æ–¥ –±–ª–æ–∫–∏: \`\`\`javascript\n–∫–æ–¥\n\`\`\` (–¥–ª—è –¥–æ–≤–≥–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤)
3. –î–æ–¥–∞–≤–∞–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–æ —Ç–µ–∫—Å—Ç—É —Ç–∞–º, –¥–µ –¥–æ—Ä–µ—á–Ω–æ
4. –°—Ç—Ä—É–∫—Ç—É—Ä—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ç–∞ —Å–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ

–ü—Ä–∏–∫–ª–∞–¥ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:
## –†–µ—Ü–µ–ø—Ç –∫—É—Ä—è—á–æ–≥–æ —Å—É–ø—É üç≤

**–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:**
- 1 –∫–≥ –∫—É—Ä—è—á–∏—Ö —Å—Ç–µ–≥–æ–Ω üçó
- 2 –º–æ—Ä–∫–≤–∏–Ω–∏ ü•ï
- 2 –∫–∞—Ä—Ç–æ–ø–ª–∏–Ω–∏ ü•î

**–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:**
1. –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ –∫—É—Ä—è—Ç–∏–Ω—É üçó
2. –í–∞—Ä—ñ—Ç—å –±—É–ª—å–π–æ–Ω
3. –î–æ–¥–∞–π—Ç–µ –æ–≤–æ—á—ñ ü•ïü•î`;

      if (!messagesArr || messagesArr.length === 0) {
        throw new Error('–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Ç—É.');
      }

      const formattedMessages = messagesArr
        .filter((m) => {
          return (
            m &&
            m.parts &&
            Array.isArray(m.parts) &&
            m.parts.length > 0 &&
            m.parts[0] &&
            m.parts[0].text &&
            m.parts[0].text.trim() &&
            (m.role === 'user' || m.role === 'model')
          );
        })
        .map((m) => ({
          role: m.role,
          parts: [{ text: m.parts[0].text.trim() }],
        }));

      if (formattedMessages.length === 0) {
        throw new Error('–ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Ç—É.');
      }

      const allMessages = [{ role: 'user', parts: [{ text: systemPrompt }] }, ...formattedMessages];

      const result = await model.generateContent({
        contents: allMessages,
      });

      const response = result.response;
      return response.text();
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Gemini:', err);
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI.');
    }
  },

  async generateChatTitle(firstMessageText) {
    if (!firstMessageText || typeof firstMessageText !== 'string' || firstMessageText.trim() === '') {
      return '–ù–æ–≤–∏–π —á–∞—Ç';
    }
    const prompt = `–î–∞–π –∫–æ—Ä–æ—Ç–∫—É, –∑–º—ñ—Å—Ç–æ–≤–Ω—É –Ω–∞–∑–≤—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${firstMessageText}". –ë–µ–∑ –ª–∞–ø–æ–∫. –î–æ 5 —Å–ª—ñ–≤.`;
    try {
      const result = await model.generateContent(prompt);
      const response = result.response;
      return response.text().trim() || '–ù–∞–∑–≤–∞ —á–∞—Ç—É';
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–≥–æ–ª–æ–≤–∫—É:', error);
      return '–ù–∞–∑–≤–∞ —á–∞—Ç—É';
    }
  },

  async createNewChat(userId) {
    if (!userId) {
      throw new Error("ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç—É.");
    }
    try {
      const docRef = await addDoc(collection(db, 'chats'), {
        userId: userId,
        title: '–ù–æ–≤–∏–π —á–∞—Ç',
        createdAt: serverTimestamp(),
      });
      console.log('–ù–æ–≤–∏–π —á–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: ', docRef.id);
      return docRef.id;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É:', error);
      throw error;
    }
  },

  async getChatsForUser(userId) {
    if (!userId) return [];

    try {
      console.log('getChatsForUser: userId =', userId);
      const chatsCollectionRef = collection(db, 'chats');
      const q = query(chatsCollectionRef, where('userId', '==', userId), orderBy('createdAt', 'desc'));
      const querySnapshot = await getDocs(q);

      const chats = querySnapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          ...data,
          createdAt: data.createdAt ? data.createdAt.toDate().toISOString() : new Date().toISOString(),
        };
      });
      console.log('getChatsForUser: chats =', chats);

      return chats;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤:', error);
      return [];
    }
  },
  async deleteChat(chatId) {
    if (!chatId) throw new Error("ID —á–∞—Ç—É —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º.");
    try {
      const chatDocRef = doc(db, 'chats', chatId);
      await deleteDoc(chatDocRef);
      console.log('–ß–∞—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Firestore');
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É –∑ Firestore:', error);
      throw error;
    }
  },

  async addMessageToChat(chatId, messageData) {
    if (!chatId || !messageData) throw new Error("ID —á–∞—Ç—É —Ç–∞ –¥–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏.");
    try {
      const messagesCollectionRef = collection(db, 'chats', chatId, 'messages');

      await addDoc(messagesCollectionRef, {
        ...messageData,
        createdAt: serverTimestamp(),
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Firestore:', error);
      throw error;
    }
  },

  async getMessagesForChat(chatId) {
    if (!chatId) return [];
    try {
      const messagesRef = collection(db, 'chats', chatId, 'messages');
      const q = query(messagesRef, orderBy('createdAt', 'asc'));
      const querySnapshot = await getDocs(q);

      const messages = querySnapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          ...data,
          createdAt: data.createdAt ? data.createdAt.toDate().toISOString() : new Date().toISOString(),
        };
      });

      return messages;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
      return [];
    }
  },

  async updateChatTitle(chatId, newTitle) {
    if (!chatId || !newTitle) return;
    try {
      const chatDocRef = doc(db, 'chats', chatId);
      await updateDoc(chatDocRef, { title: newTitle });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ —á–∞—Ç—É:', error);
    }
  },
};
